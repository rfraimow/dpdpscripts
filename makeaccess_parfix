#!/bin/bash
# make access
version=0.2.1
#requires uuid (ossp-uuid), ffmpeg, xmlstarlet
#Associated scripts: verifySIPCompliance.py, mmfunctions
scriptdir=$(dirname $(which "$0"))
package_path="$1"
. "${scriptdir}/mmfunctions" || { echo "Missing '$scriptdir/mmfunctions'. Exiting." ; exit 1 ;};
. "${scriptdir}/dpdpfunctions" || { echo "Missing '${scriptdir}/dpdpfunctions'. Exiting." ; exit 1 ;};
unset dependencies
dependencies=(ffmpeg xml "${scriptdir}/removeDSStore" start_premis.sh premis_add_event.sh premis_add_agent.sh)

onjects_path="./objects"
logs_path="./metadata/submissionDocumentation/logs"
techmd_path="./metadata/submissionDocumentation/techmd"
access_path="./objects/access"

metadata_path="./metadata"

check_dependencies "${dependencies[@]}"

#checks on script arguments, package compliance check, will it conform and run in Archivematica?
[ "$#" -ne "1" ] && { echo This script requires one argument, the path to a repository SIP. ; exit 1 ;};
[ ! -d "$package_path" ] && { echo "$package_path" is not a directory. ; exit 1 ;};

# warning, deleting .DS_Store files before processing package
find "$package_path" -name '*.DS_Store' -type f -delete

verifySIPCompliance.py "$package_path"
[ "$?" != 0 ] && { echo "$package_path file SIP Compliance tests." ; exit 1 ;};

# Add media tests here. At this point this requires an object of one media file.

startdir=`pwd`
cd "$package_path"
mkdir -p "$access_path"
for file in `find ./objects -maxdepth 1 -mindepth 1 ! -name '.*' -type f` ; do

    base=`basename "$file"`

    #check pre-requisites
    if [ -s "${access_path}/${base%.*}.mp4" ] ; then
        echo "${access_path}/${base%.*}.mp4 already exists"
        # use output code to indicate that the service is not needed
        exit 86
    fi

    #set premis event variables
    eventIdentifierType="UUID"
    eventIdentifierValue=`uuid -v 4`
    eventType="compression-mp4.h264.bv750.aac.ba128-v1"
    eventDateTime=`date "+%FT%T"`
    eventDetail="Original object is compressed for access compliant with web-streaming"
    sourceLinkingObjectIdentifierType="URI"
    sourceLinkingObjectIdentifierValue="$file"
    outcomeLinkingObjectIdentifierType="UUID"
    outcomeLinkingObjectIdentifierValue=`uuid -v 4`
    linkingAgentRole="Executing program"

    #set premis agent variables
    agentIdentifierType="URI"
    agentIdentifierValue="http://ffmpeg.org"
    agentName="FFmpeg"
    agentType="software"
    agentNote=`"$ffmpeg_exe" -version 2> /dev/null`
    linkingEventIdentifierType="$eventIdentifierType"
    linkingEventIdentifierValue="eventIdentifierValue"

    #get information on the source file

    format=$(mediainfo "$file" | grep Format | cut -d ':' -f 2 | sed 's|:|/|g')
    if [ "$format" = " ISO 9660" ] ; then
	dar=$(ffprobe "$file" -show_streams -select_streams v:0 2> /dev/null | grep display_aspect_ratio= | cut -d = -f 2 | sed 's|:|/|g')
    else 
	dar=$(mediainfo "$file" | grep Display | cut -d ':' -f 2-3 | sed 's|:|/|g')
    	if [ "$dar" = "0/1" ] ; then
            get_width "$1"
            get_height "$1"
            dar="${width}/${height}"
    	fi
    fi
    echo "$format"
    echo "$dar"

     sar=$(ffprobe "$file" -show_streams -select_streams v:0 2> /dev/null | grep sample_aspect_ratio= | cut -d = -f 2 | sed 's|:|/|g')
    if [ "$sar" = "0/1" ] ; then
        sar="1/1"
    fi
    echo "$sar"

    #ffmpeg time
    event_logs_path="$logs_path/$eventType"
    mkdir -p "$event_logs_path"
    mkdir -p "$techmd_path"
    export FFREPORT="file=${event_logs_path}/%p_%t_$(basename $0)_${version}.txt"
    

    if [ "$sar" = "1/1" ]; then 
        _run ffmpeg -n -report -v warning -i "$file" -c:v libx264 -pix_fmt yuv420p -b:v 750k -vf "yadif" -c:a libfaac -b:a 128k "${access_path}/${base%.*}.mp4"
    elif [ "$sar" != "1/1" ] && [ "$dar" = " 4/3" -o "$dar" = "4/3"  ]; then 
	_run ffmpeg -n -report -v warning -i "$file" -c:v libx264 -pix_fmt yuv420p -b:v 750k -vf "yadif" -vf setsar="1:1" -vf scale="640:480" -c:a libfaac -b:a 128k "${access_path}/${base%.*}.mp4"
    elif [ "$sar" != "1/1" ] && [ "$dar" = " 16/9" -o "$dar" = "16/9"  ]; then 
        _run ffmpeg -n -report -v warning -i "$file" -c:v libx264 -pix_fmt yuv420p -b:v 750k -vf "yadif" -vf setsar="1:1" -vf scale="640:360" -c:a libfaac -b:a 128k "${access_path}/${base%.*}.mp4"
    else 
	echo "display aspect ratio is not standard, reformat manually"
    fi
    EC=`echo "$?"`
    if [ "$EC" -ne "0" ] ; then
        eventOutcome="failure"
        #quarantine?
    else
        eventOutcome="success"
    fi
    cd "$startdir"
    [ ! -f "$package_path/metadata/premis.xml" ] && start_premis.sh "$package_path"
    premis_add_event.sh -x "$package_path/metadata/premis.xml" -i "$eventIdentifierType" -I "$eventIdentifierValue" -T "$eventType" -d "$eventDateTime" -D "$eventDetail" -E "$eventOutcome" -l "$agentIdentifierType" -L "$agentIdentifierValue" -r "$linkingAgentRole" -s "$sourceLinkingObjectIdentifierType" -S "$sourceLinkingObjectIdentifierValue" -o "URI" -O "./objects/access/${base%.*}.mp4"
    premis_add_agent.sh -x "$package_path/metadata/premis.xml" -i "$agentIdentifierType" -I "$agentIdentifierValue" -n "$agentName" -T "$agentType" -N "$agentNote" -l "$eventIdentifierType" -L "$eventIdentifierValue"

done
