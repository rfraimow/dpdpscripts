#!/bin/bash
# makeprores, makes a file appropriate for keeping editors happy
version="1.0"
scriptdir=$(dirname $(which "$0"))
. "$scriptdir/mmfunctions" || { echo "Missing '$scriptdir/mmfunctions'. Exiting." ; exit 1 ;};
dependencies=(ffmpeg)
_initialize_make

outputdir="$HOME/Desktop/$(basename $0)" # default output directory, override with -o

usage(){
    echo
    echo "$(basename ${0}) ${version}"
    echo "This application will create a prores/quicktime file (suitable for editing) from a video file or package input with the following options. By default the output will be written to ${outputdir}. You can override this with the -o option."
    echo "Dependencies: ${dependencies[@]}"
    echo "Usage: $(basename $0) [ -o /directory/to/write/to/ ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -d directory ( directory to deliver the resulting file to )"
    echo "  -o directory ( directory to write the resulting file to )"
    echo "  -n (dry-run mode, show the commands that would be run but don't do anything)"
    echo "  -e emailaddress ( send an email about the delivery, only valid if -d is used )"
    echo "  -E emailaddress ( send an email about process outcome )"
    echo "  -h ( display this help )"
    echo
    exit
}
[ "${#}" = 0 ] && usage

# command-line options to set mediaid and original variables
OPTIND=1
while getopts ":o:d:e:E:nh" opt ; do
    case "${opt}" in
        o) outputdir_forced="$OPTARG" && _check_outputdir_forced ;;
        d) deliverdir="$OPTARG" && check_deliverdir ;;
        e) emailaddress_delivery="$OPTARG" && check_emailaddress "${emailaddress_delivery}" ;;
        E) emailaddress_outcome="$OPTARG" && check_emailaddress "${emailaddress_outcome}" ;;
        n) DRYRUN=true;;
        h) usage ;;
        *) echo "bad option -$OPTARG" ; usage ;;
        :) echo "Option -$OPTARG requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

while [ "${*}" != "" ] ; do
    # get context about the input
    input="$1"
    if [ -z "${outputdir_forced}" ] ; then
        [ -d "${input}" ] && { outputdir="${input}/objects/access/prores" && logdir="${input}/metadata/submissionDocumentation/logs" ;};
        [ -f "${input}" ] && { outputdir=$(dirname "${input}")"/access/prores" && logdir="$(dirname "${input}")/access/logs" ;};
        [ ! "${outputdir}" ] && { outputdir="${input}/objects/access/prores" && logdir="${input}/metadata/submissionDocumentation/logs" ;};
    else
        outputdir="${outputdir_forced}"
        logdir="${outputdir}/logs"
    fi
    _find_input "${input}"
    mediaid=$(basename "${input}" | cut -d. -f1)

    # set up output
    _log -b
    output="${outputdir}/${mediaid%.*}_prores.mov"
    [ -s "${output}" ] && { report -wt "WARNING ${output} already exists, skipping transcode" ; shift ; continue ;};
    _run mkdir -p "${outputdir}"

    # clear local arrays
    unset inputoptions
    unset middleoptions

    
    # encoding options
    get_codectagstring "${sourcefile}"
    inputoptions+=(-vsync 0)
    if [[ "${codec_tag_string}" == "mjp2" ]] ; then
        inputoptions+=(-vcodec libopenjpeg)
    middleoptions+=(-map 0:v)
    middleoptions+=(-map 0:a)
    middleoptions+=(-c:v prores)
    middleoptions+=(-c:a pcm_s16le)

    _prep_ffmpeg_log
    _run ffmpeg ${inputoptions[@]} -i "${sourcefile}" ${middleoptions[@]} "${output}"
    echo
    _summarize_make
    _deliver_output
    shift
    _log -e
done
